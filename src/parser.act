/*
 * Copyright 2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%prefixes%

	terminal = SJP_TOK_;
	function = p_;

%persistents%

	lex_state :lex_state;
	act_state :act_state;
	ast       :ast;

%maps%

	string -> string;
	number -> number;
	bool   -> bool;

	kw     -> kw;
	type   -> type;

        ast-prop-schema -> ast_prop_schema_t;
        ast-schema -> ast_schema_t;

%header% @{

	#include <assert.h>
	#include <stdarg.h>
	#include <stdlib.h>
	#include <string.h>

	#include "sjp_lexer.h"

	#include "debug.h"
	#include "parser.h"
	#include "jdom.h"
	#include "ast.h"
	#include "kw.h"
	#include "xalloc.h"

	struct act_state {
		struct sjp_token t;
		enum SJP_TOKEN save;
	};

	typedef struct json_string string;
	typedef json_number number;
	typedef enum kw kw;
	typedef enum json_valuetype type;
        typedef struct ast_schema *ast_schema_t;
        typedef struct ast_property_schema *ast_prop_schema_t;

	#define CURRENT_TERMINAL act_state->t.type
	#define ERROR_TERMINAL   SJP_TOK_NONE /* XXX: NONE is not an error */
	#define ADVANCE_LEXER    next(lex_state, &act_state->t)
	#define SAVE_LEXER(type) act_state->save = (type)
	#define RESTORE_LEXER    act_state->t.type = act_state->save

	static void
	xerr(struct sjp_lexer *lex_state, enum kw k, const char *fmt, ...)
	{
		va_list ap;

		assert(lex_state != NULL);

		/* XXX: one token ahead */
		fprintf(stderr, "%zu: ", lex_state->line);

		if (k != 0) {
			fprintf(stderr, "\"%s\": ", kw_name(k));
		}

		va_start(ap, fmt);
		vfprintf(stderr, fmt, ap);
		va_end(ap);

		fprintf(stderr, "\n");

		exit(1);
	}

	static void
	xerr_syntax(struct sjp_lexer *lex_state, const char *name)
	{
		assert(lex_state != NULL);

		if (name == NULL) {
			xerr(lex_state, 0, "Syntax error");
		} else {
			xerr(lex_state, 0, "Syntax error: expected %s", name);
		}
	}

	static void
	next(struct sjp_lexer *lex_state, struct sjp_token *t)
	{
		int r;

		assert(lex_state != NULL);
		assert(t != NULL);

		r = sjp_lexer_token(lex_state, t);
		if (SJP_ERROR(r)) {
			xerr(lex_state, 0, "sjp error: %d, n=%zu", r, t->n);
			exit(EXIT_FAILURE);
		}

		if (debug & DEBUG_SJP) {
/* TODO: talk about r */
		}

		switch (r) {
		case SJP_OK:
			if (t->type == SJP_TOK_NONE) {
				xerr(lex_state, 0, "parsing after EOS");
				abort();
			}
			break;

		case SJP_MORE:
			assert(t->type == SJP_TOK_NONE
				|| t->type == SJP_TOK_STRING || t->type == SJP_TOK_NUMBER);

			if (t->type == SJP_TOK_NONE) {
				sjp_lexer_eos(lex_state);
				next(lex_state, t);
				return;
			}

			/*
			 * TODO: need more input; pull from sjp_lexer_more(),
			 * and get rid of readfile() in main.
			 * Tokens returned here are partial; I don't see how to sensibly avoid
			 * buffering those.
			 */

			/*
			 * Partial tokens are currently not possible in valid input
			 * due to main() buffering the entire input. So any partial token here
			 * is from an incomplete token at the end of input (presumably an
			 * unterminated string).
			 */
			/* TODO: show token name, position */
			xerr(lex_state, 0, "sjp incomplete token at end of input\n");
			exit(EXIT_FAILURE);

		case SJP_PARTIAL:
			assert(t->type != SJP_TOK_NONE);
			/* XXX: how can this happen? */
			xerr(lex_state, 0, "sjp unexpected partial token\n");
			abort();

		default:
			xerr(lex_state, 0, "sjp unrecognised error: %d", r);
			abort();
		}

		if (debug & DEBUG_LEX) {
			switch (t->type) {
			case SJP_TOK_NULL:
				fprintf(stderr, "<NULL>\n");
				break;

			case SJP_TOK_TRUE:
				fprintf(stderr, "<TRUE>\n");
				break;

			case SJP_TOK_FALSE:
				fprintf(stderr, "<FALSE>\n");
				break;

			case SJP_TOK_STRING:
				fprintf(stderr, "<STRING: \"%.*s\">\n", (int) t->n, t->value);
				break;

			case SJP_TOK_NUMBER:
				fprintf(stderr, "<NUMBER: %f>\n", t->dbl);
				break;

			case SJP_TOK_EOS:
				fprintf(stderr, "<EOS>\n");
				break;

			default:
				fprintf(stderr, "<'%c'>\n", (int) t->type);
				break;
			}
		}
	}

@}, @{

	#include <stdio.h>

	#include "sjp_lexer.h"

	typedef struct ast_schema * ast;
	typedef struct act_state * act_state;
	typedef struct sjp_lexer * lex_state;

@};

%terminals%

	STRING: () -> (s :string) = @{
		assert(act_state->t.type == @$STRING);

		@s.s   = xstrndup(act_state->t.value, act_state->t.n);
		@s.len = act_state->t.n;
	@};

	NUMBER: () -> (n :number) = @{
		assert(act_state->t.type == @$NUMBER);

		@n = act_state->t.dbl;
	@};

	TRUE: () -> (v :bool) = @{
		@v = true;
	@};

	FALSE: () -> (v :bool) = @{
		@v = false;
	@};

%actions%

	<kw-lookup>: (s :string) -> (k :kw) = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<kw-lookup>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

		@k = kw_lookup(&@s);
		if (@k == 0) {
			xerr(lex_state, 0, "Unrecognised keyword: \"%s\"", @s.s);
			@!;
		}
	@};

	<type-lookup>: (s :string) -> (t :type) = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<type-lookup>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

		@t = type_lookup(&@s);
		if (@t == 0) {
			xerr(lex_state, KW_TYPE, "Unknown type name: \"%s\"", @s.s);
		}
	@};

	<kw-schema>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_SCHEMA);                @};
	<kw-ref>:                   (k :kw) -> (v :bool) = @{ @v = (@k == KW_REF);                   @};
	<kw-id>:                    (k :kw) -> (v :bool) = @{ @v = (@k == KW_ID);                    @};

	<kw-multiple-of>:           (k :kw) -> (v :bool) = @{ @v = (@k == KW_MULTIPLE_OF);           @};
	<kw-maximum>:               (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAXIMUM);               @};
	<kw-exclusive-maximum>:     (k :kw) -> (v :bool) = @{ @v = (@k == KW_EXCLUSIVE_MAXIMUM);     @};
	<kw-minimum>:               (k :kw) -> (v :bool) = @{ @v = (@k == KW_MINIMUM);               @};
	<kw-exclusive-minimum>:     (k :kw) -> (v :bool) = @{ @v = (@k == KW_EXCLUSIVE_MINIMUM);     @};
	<kw-max-length>:            (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAX_LENGTH);            @};
	<kw-min-length>:            (k :kw) -> (v :bool) = @{ @v = (@k == KW_MIN_LENGTH);            @};
	<kw-pattern>:               (k :kw) -> (v :bool) = @{ @v = (@k == KW_PATTERN);               @};
	<kw-items>:                 (k :kw) -> (v :bool) = @{ @v = (@k == KW_ITEMS);                 @};
	<kw-additional-items>:      (k :kw) -> (v :bool) = @{ @v = (@k == KW_ADDITIONAL_ITEMS);      @};
	<kw-max-items>:             (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAX_ITEMS);             @};
	<kw-min-items>:             (k :kw) -> (v :bool) = @{ @v = (@k == KW_MIN_ITEMS);             @};
	<kw-unique-items>:          (k :kw) -> (v :bool) = @{ @v = (@k == KW_UNIQUE_ITEMS);          @};
	<kw-contains>:              (k :kw) -> (v :bool) = @{ @v = (@k == KW_CONTAINS);              @};
	<kw-max-properties>:        (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAX_PROPERTIES);        @};
	<kw-min-properties>:        (k :kw) -> (v :bool) = @{ @v = (@k == KW_MIN_PROPERTIES);        @};
	<kw-required>:              (k :kw) -> (v :bool) = @{ @v = (@k == KW_REQUIRED);              @};
	<kw-properties>:            (k :kw) -> (v :bool) = @{ @v = (@k == KW_PROPERTIES);            @};
	<kw-pattern-properties>:    (k :kw) -> (v :bool) = @{ @v = (@k == KW_PATTERN_PROPERTIES);    @};
	<kw-additional-properties>: (k :kw) -> (v :bool) = @{ @v = (@k == KW_ADDITIONAL_PROPERTIES); @};
	<kw-dependencies>:          (k :kw) -> (v :bool) = @{ @v = (@k == KW_DEPENDENCIES);          @};
	<kw-property-names>:        (k :kw) -> (v :bool) = @{ @v = (@k == KW_PROPERTY_NAMES);        @};

	<kw-enum>:                  (k :kw) -> (v :bool) = @{ @v = (@k == KW_ENUM);                  @};
	<kw-const>:                 (k :kw) -> (v :bool) = @{ @v = (@k == KW_CONST);                 @};
	<kw-type>:                  (k :kw) -> (v :bool) = @{ @v = (@k == KW_TYPE);                  @};
	<kw-all-of>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_ALL_OF);                @};
	<kw-any-of>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_ANY_OF);                @};
	<kw-one-of>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_ONE_OF);                @};
	<kw-not>:                   (k :kw) -> (v :bool) = @{ @v = (@k == KW_NOT);                   @};

	<kw-title>:                 (k :kw) -> (v :bool) = @{ @v = (@k == KW_TITLE);                 @};
	<kw-definitions>:           (k :kw) -> (v :bool) = @{ @v = (@k == KW_DEFINITIONS);           @};
	<kw-description>:           (k :kw) -> (v :bool) = @{ @v = (@k == KW_DESCRIPTION);           @};
	<kw-default>:               (k :kw) -> (v :bool) = @{ @v = (@k == KW_DEFAULT);               @};
	<kw-examples>:              (k :kw) -> (v :bool) = @{ @v = (@k == KW_EXAMPLES);              @};

        <new-prop-schema>:          (p :string,sch :ast-schema) -> (ps :ast-prop-schema) = @{
                @ps = xmalloc(sizeof *@ps);
                @ps->pattern.str = @p;
                @ps->pattern.dialect = RE_LITERAL;
                @ps->schema = @sch;
                @ps->next = NULL;
        @};

        <append-list-of-props>:     (head: ast-prop-schema,entry: ast-prop-schema) -> () = @{
                struct ast_property_schema tmp;
                tmp = *(@head);
                *(@head) = *(@entry);
                *(@entry) = tmp;
                @head->next = @entry;
        @};

        <parse-schema>: () -> (sch: ast-schema) = @{
                static struct ast_schema zero = { 0 };
                @sch = xmalloc(sizeof *@sch);
                *@sch = zero;
                p_schema(lex_state, act_state, @sch);
        @};

        <set-properties>:           (ps :ast-prop-schema) -> () = @{
		if (debug & DEBUG_ACT) {
                        // XXX - make this useful!
			fprintf(stderr, "<set-properties>: %p\n", (void *) @ps);
		}
                ast->properties.set = @ps;
        @};

	<set-schema>: (s :string) -> () = @{
		assert(@s.s != NULL);

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-schema>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

		ast->schema = @s;
	@};

	<set-id>: (s :string) -> () = @{
		assert(@s.s != NULL);

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-id>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

		ast->id = @s;
	@};

	<set-multiple-of>: (n :number) -> () = @{
		if (!(@n > 0)) {
			xerr(lex_state, KW_MULTIPLE_OF, "expected > 0, got %f", @n);
		}

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-multiple-of>: %f\n", @n);
		}

		ast->kws |= KWS_MULTIPLE_OF;
		ast->multiple_of = @n;
	@};

	<set-maximum>: (n :number) -> () = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-maximum>: %f\n", @n);
		}

		ast->kws |= KWS_MAXIMUM;
		ast->maximum = @n;
		ast->exclusive_maximum = false;
	@};

	<set-exclusive-maximum>: (n :number) -> () = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-exclusive-maximum>: %f\n", @n);
		}

		ast->kws |= KWS_MAXIMUM;
		ast->maximum = @n;
		ast->exclusive_maximum = true;
	@};

	<set-minimum>: (n :number) -> () = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-minimum>: %f\n", @n);
		}

		ast->kws |= KWS_MINIMUM;
		ast->minimum = @n;
		ast->exclusive_minimum = false;
	@};

	<set-exclusive-minimum>: (n :number) -> () = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-exclusive-minimum>: %f\n", @n);
		}

		ast->kws |= KWS_MINIMUM;
		ast->minimum = @n;
		ast->exclusive_minimum = true;
	@};

	<clear-types> = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<clear-types>\n");
		}

		ast->types = 0;
	@};

	<set-type>: (t :type) -> () = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-type>: \"%s\"\n", type_name(@t));
		}

		switch (@t) {
		case JSON_VALUE_OBJECT:
		case JSON_VALUE_ARRAY:
		case JSON_VALUE_STRING:
		case JSON_VALUE_NUMBER:
		case JSON_VALUE_INTEGER:
		case JSON_VALUE_BOOL:
		case JSON_VALUE_NULL:
			break;

		default:
			xerr(lex_state, KW_TYPE, "Type must be one of: "
				"\"null\", \"boolean\", \"object\", \"array\", \"number\", \"string\" or \"integer\"");
		}

		if ((ast->types & @t)) {
			/* TODO: quote C&V for errors */
			xerr(lex_state, KW_TYPE, "Duplicate type; type names must be unique");
		}

		ast->types |= @t;
	@};

	<set-title>: (s :string) -> () = @{
		assert(@s.s != NULL);

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-title>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

		ast->title = @s;
	@};

	<set-description>: (s :string) -> () = @{
		assert(@s.s != NULL);

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<set-description>: \"%.*s\"\n", (int) @s.len, @s.s);
		}

		ast->description = @s;
	@};

	<err-unimplemented> = @{
		xerr(lex_state, 0, "unimplemented");
	@};

	<err-syntax> = @{
		xerr_syntax(lex_state, NULL);
	@};

	<err-expected-colon> = @{
		xerr_syntax(lex_state, "colon");
	@};

	<err-expected-comma> = @{
		xerr_syntax(lex_state, "comma");
	@};

	<err-expected-directive> = @{
		xerr_syntax(lex_state, "keyword directive");
	@};

	<err-expected-schema> = @{
		xerr_syntax(lex_state, "schema");
	@};

	<err-expected-type> = @{
		xerr_syntax(lex_state, "type");
	@};

	<err-expected-number> = @{
		xerr_syntax(lex_state, "number");
	@};

	<err-expected-string> = @{
		xerr_syntax(lex_state, "string");
	@};

	<err-expected-id> = @{
		xerr_syntax(lex_state, "id");
	@};

%trailer% @{

	void
	parse(struct sjp_lexer *lex_state, struct ast_schema *ast)
	{
		struct act_state a, *act_state = &a;

		assert(lex_state != NULL);
		assert(ast != NULL);

		ADVANCE_LEXER;

		p_file(lex_state, act_state, ast);
	}

@}, @{

	void
	parse(struct sjp_lexer *lex_state, struct ast_schema *ast);

@};

