/*
 * Copyright 2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%prefixes%

	terminal = JSON_;
	function = p_;

%persistents%

	lex_state :lex_state;
	act_state :act_state;
	ast       :ast;

%maps%

	string -> string;
	number -> number;
	bool   -> int;

	kw     -> kw;
	type   -> type;

%header% @{

	#define _POSIX_C_SOURCE 200809L

	#include <assert.h>
	#include <stdlib.h>
	#include <string.h>

	#include "json.h"
	#include "parser.h"
	#include "jdom.h"
	#include "ast.h"
	#include "kw.h"

	struct act_state {
		enum json_type t;
		enum json_type save;
	};

	typedef struct json_string string;
	typedef json_number number;
	typedef enum kw kw;
	typedef enum json_valuetype type;

	#define true  1
	#define false 0

	#define JSON_ARRAY__END  JSON_ARRAY_END
	#define JSON_OBJECT__END JSON_OBJECT_END

	#define CURRENT_TERMINAL act_state->t
	#define ERROR_TERMINAL   JSON_ERROR
	#define ADVANCE_LEXER    act_state->t = json_next(lex_state)
	#define SAVE_LEXER(t)    act_state->save = (t)
	#define RESTORE_LEXER    act_state->t = act_state->save

	/* TODO: move to kw.c */
	static enum kw
	kw_lookup(const struct json_string *str)
	{
		size_t i;

		struct {
			const char *s;
			enum kw k;
		} a[] = {
			{ "$schema",              KW_SCHEMA                },
			{ "$ref",                 KW_REF                   },
			{ "$id",                  KW_ID                    },

			{ "multipleOf",           KW_MULTIPLE_OF           },
			{ "maximum",              KW_MAXIMUM               },
			{ "exclusiveMaximum",     KW_EXCLUSIVE_MAXIMUM     },
			{ "minimum",              KW_MINIMUM               },
			{ "exclusiveMinimum",     KW_EXCLUSIVE_MINIMUM     },
			{ "maxLength",            KW_MAX_LENGTH            },
			{ "minLength",            KW_MIN_LENGTH            },
			{ "pattern",              KW_PATTERN               },
			{ "items",                KW_ITEMS                 },
			{ "additionalItems",      KW_ADDITIONAL_ITEMS      },
			{ "maxItems",             KW_MAX_ITEMS             },
			{ "minItems",             KW_MIN_ITEMS             },
			{ "uniqueItems",          KW_UNIQUE_ITEMS          },
			{ "contains",             KW_CONTAINS              },
			{ "maxProperties",        KW_MAX_PROPERTIES        },
			{ "minProperties",        KW_MIN_PROPERTIES        },
			{ "required",             KW_REQUIRED              },
			{ "properties",           KW_PROPERTIES            },
			{ "patternProperties",    KW_PATTERN_PROPERTIES    },
			{ "additionalProperties", KW_ADDITIONAL_PROPERTIES },
			{ "dependencies",         KW_DEPENDENCIES          },
			{ "propertyNames",        KW_PROPERTY_NAMES        },

			{ "enum",                 KW_ENUM                  },
			{ "const",                KW_CONST                 },
			{ "type",                 KW_TYPE                  },
			{ "allOf",                KW_ALL_OF                },
			{ "anyOf",                KW_ANY_OF                },
			{ "oneOf",                KW_ONE_OF                },
			{ "not",                  KW_NOT                   },

			/* metadata */
			{ "definitions",          KW_DEFINITIONS           },
			{ "description",          KW_DESCRIPTION           },
			{ "default",              KW_DEFAULT               },
			{ "examples",             KW_EXAMPLES              }
		};

		assert(str != NULL);
		assert(str->s != NULL);

		for (i = 0; i < sizeof a / sizeof *a; i++) {
			/* TODO: json_strcmp() */
			if (str->len != strlen(a[i].s) + 1) {
				continue;
			}

			if (0 == strcmp(str->s, a[i].s)) {
				return a[i].k;
			}
		}

		return 0;
	}

	/* TODO: move to jdom.c */
	enum json_valuetype
	type_lookup(const struct json_string *str)
	{
		size_t i;

		struct {
			const char *s;
			enum json_valuetype t;
		} a[] = {
			{ "object",  JSON_VALUE_OBJECT  },
			{ "array",   JSON_VALUE_ARRAY   },
			{ "string",  JSON_VALUE_STRING  },
			{ "number",  JSON_VALUE_NUMBER  },
			{ "integer", JSON_VALUE_INTEGER },
			{ "boolean", JSON_VALUE_BOOL    },
			{ "null",    JSON_VAlUE_NULL    },
			{ "any",     ~0U                }
		};

		assert(str != NULL);
		assert(str->s != NULL);

		for (i = 0; i < sizeof a / sizeof *a; i++) {
			/* TODO: json_strcmp() */
			if (str->len != strlen(a[i].s) + 1) {
				continue;
			}

			if (0 == strcmp(str->s, a[i].s)) {
				return a[i].t;
			}
		}

		return 0;
	}

	char *
	xstrndup(const char *s, size_t n)
	{
		char *new;

		new = strndup(s, n);
		if (new == NULL) {
			perror("xstrndup");
			abort();
		}

		return new;
	}

@}, @{

	#include <stdio.h>

	#include "json.h"

	typedef struct ast_schema * ast;
	typedef struct act_state * act_state;
	typedef json_stream * lex_state;

@};

%terminals%

	STRING: () -> (s :string) = @{
		assert(act_state->t == JSON_STRING);

		@s.s = json_get_string(lex_state, &@s.len);
		if (@s.s == NULL) {
			perror("json_get_string");
			exit(1);
		}

		@s.s = xstrndup(@s.s, @s.len);
	@};

	NUMBER: () -> (n :number) = @{
		assert(act_state->t == JSON_NUMBER);

		@n = json_get_number(lex_state);
	@};

	TRUE: () -> (v :bool) = @{
		@v = true;
	@};

	FALSE: () -> (v :bool) = @{
		@v = false;
	@};

%actions%

	<kw-lookup>: (s :string) -> (k :kw) = @{
		@k = kw_lookup(&@s);
		if (@k == 0) {
			/* TODO: error? */
			@!;
		}
	@};

	<type-lookup>: (s :string) -> (t :type) = @{
		@t = type_lookup(&@s);
		if (@t == 0) {
			fprintf(stderr, "Unknown type name: \"%s\"\n", @s.s);
			@!;
		}
	@};

	<kw-schema>:               (k :kw) -> (v :bool) = @{ @v = (@k == KW_SCHEMA);                @};
	<kw-ref>:                  (k :kw) -> (v :bool) = @{ @v = (@k == KW_REF);                   @};
	<kw-id>:                   (k :kw) -> (v :bool) = @{ @v = (@k == KW_ID);                    @};

	<kw-multipleof>:           (k :kw) -> (v :bool) = @{ @v = (@k == KW_MULTIPLE_OF);           @};
	<kw-maximum>:              (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAXIMUM);               @};
	<kw-exclusivemaximum>:     (k :kw) -> (v :bool) = @{ @v = (@k == KW_EXCLUSIVE_MAXIMUM);     @};
	<kw-minimum>:              (k :kw) -> (v :bool) = @{ @v = (@k == KW_MINIMUM);               @};
	<kw-exclusiveminimum>:     (k :kw) -> (v :bool) = @{ @v = (@k == KW_EXCLUSIVE_MINIMUM);     @};
	<kw-maxlength>:            (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAX_LENGTH);            @};
	<kw-minlength>:            (k :kw) -> (v :bool) = @{ @v = (@k == KW_MIN_LENGTH);            @};
	<kw-pattern>:              (k :kw) -> (v :bool) = @{ @v = (@k == KW_PATTERN);               @};
	<kw-items>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_ITEMS);                 @};
	<kw-additionalitems>:      (k :kw) -> (v :bool) = @{ @v = (@k == KW_ADDITIONAL_ITEMS);      @};
	<kw-maxitems>:             (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAX_ITEMS);             @};
	<kw-minitems>:             (k :kw) -> (v :bool) = @{ @v = (@k == KW_MIN_ITEMS);             @};
	<kw-uniqueitems>:          (k :kw) -> (v :bool) = @{ @v = (@k == KW_UNIQUE_ITEMS);          @};
	<kw-contains>:             (k :kw) -> (v :bool) = @{ @v = (@k == KW_CONTAINS);              @};
	<kw-maxproperties>:        (k :kw) -> (v :bool) = @{ @v = (@k == KW_MAX_PROPERTIES);        @};
	<kw-minproperties>:        (k :kw) -> (v :bool) = @{ @v = (@k == KW_MIN_PROPERTIES);        @};
	<kw-required>:             (k :kw) -> (v :bool) = @{ @v = (@k == KW_REQUIRED);              @};
	<kw-properties>:           (k :kw) -> (v :bool) = @{ @v = (@k == KW_PROPERTIES);            @};
	<kw-patternproperties>:    (k :kw) -> (v :bool) = @{ @v = (@k == KW_PATTERN_PROPERTIES);    @};
	<kw-additionalproperties>: (k :kw) -> (v :bool) = @{ @v = (@k == KW_ADDITIONAL_PROPERTIES); @};
	<kw-dependencies>:         (k :kw) -> (v :bool) = @{ @v = (@k == KW_DEPENDENCIES);          @};
	<kw-propertynames>:        (k :kw) -> (v :bool) = @{ @v = (@k == KW_PROPERTY_NAMES);        @};

	<kw-enum>:                 (k :kw) -> (v :bool) = @{ @v = (@k == KW_ENUM);                  @};
	<kw-const>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_CONST);                 @};
	<kw-type>:                 (k :kw) -> (v :bool) = @{ @v = (@k == KW_TYPE);                  @};
	<kw-allof>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_ALL_OF);                @};
	<kw-anyof>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_ANY_OF);                @};
	<kw-oneof>:                (k :kw) -> (v :bool) = @{ @v = (@k == KW_ONE_OF);                @};
	<kw-not>:                  (k :kw) -> (v :bool) = @{ @v = (@k == KW_NOT);                   @};

	<kw-definitions>:          (k :kw) -> (v :bool) = @{ @v = (@k == KW_DEFINITIONS);           @};
	<kw-description>:          (k :kw) -> (v :bool) = @{ @v = (@k == KW_DESCRIPTION);           @};
	<kw-default>:              (k :kw) -> (v :bool) = @{ @v = (@k == KW_DEFAULT);               @};
	<kw-examples>:             (k :kw) -> (v :bool) = @{ @v = (@k == KW_EXAMPLES);              @};

	<set-schema>: (s :string) -> () = @{
		assert(@s.s != NULL);

		ast->schema = @s;
	@};

	<set-id>: (s :string) -> () = @{
		assert(@s.s != NULL);

		ast->id = @s;
	@};

	<set-multipleof>: (n :number) -> () = @{
		if (!(@n > 0)) {
			fprintf(stderr, "multipleOf: expected > 0, got %f\n", @n);
			@!;
		}

		ast->kws |= KWS_MULTIPLE_OF;
		ast->multiple_of = @n;
	@};

	<set-maximum>: (n :number) -> () = @{
		ast->kws |= KWS_MAXIMUM;
		ast->maximum = @n;
	@};

	<clear-types> = @{
		ast->types = 0;
	@};

	<set-type>: (t :type) -> () = @{
		switch (@t) {
		case JSON_VALUE_OBJECT:
		case JSON_VALUE_ARRAY:
		case JSON_VALUE_STRING:
		case JSON_VALUE_NUMBER:
		case JSON_VALUE_INTEGER:
		case JSON_VALUE_BOOL:
		case JSON_VAlUE_NULL:
			break;

		default:
			fprintf(stderr, "Type must be one of: "
				"\"null\", \"boolean\", \"object\", \"array\", \"number\", \"string\" or \"integer\"\n");
			@!;
		}

		if ((ast->types & @t)) {
			/* TODO: quote C&V for errors */
			fprintf(stderr, "Duplicate type; type names must be unique\n");
			@!;
		}

		ast->types |= @t;
	@};

%trailer% @{

	void
	parse(json_stream *lex_state, struct ast_schema *ast)
	{
		struct act_state a, *act_state = &a;

		assert(lex_state != NULL);
		assert(ast != NULL);

		ADVANCE_LEXER;

		p_file(lex_state, act_state, ast);
	}

@}, @{

	void
	parse(json_stream *json, struct ast_schema *ast);

@};

