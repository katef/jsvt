/*
 * Copyright 2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%types%

	string;
	bool;
	number;

	kw;
	type;
        ast-schema;
        ast-schema-list;
        ast-prop-schema;
        regexp;
        re-dialect;

%terminals%

	!ERROR;
	EOS;

	COMMA;
	COLON;
	OCURLY;    CCURLY;
	OBRACKET;  CBRACKET;
	STRING: () -> (:string);
	NUMBER: () -> (:number);
	TRUE:   () -> (:bool);
	FALSE:  () -> (:bool);
	NULL;

%productions%

	<kw-lookup>:   (:string) -> (:kw);
	<type-lookup>: (:string) -> (:type);

	<kw-schema>:                (:kw) -> (:bool);
	<kw-ref>:                   (:kw) -> (:bool);
	<kw-id>:                    (:kw) -> (:bool);

	<kw-multiple-of>:           (:kw) -> (:bool);
	<kw-maximum>:               (:kw) -> (:bool);
	<kw-exclusive-maximum>:     (:kw) -> (:bool);
	<kw-minimum>:               (:kw) -> (:bool);
	<kw-exclusive-minimum>:     (:kw) -> (:bool);
	<kw-max-length>:            (:kw) -> (:bool);
	<kw-min-length>:            (:kw) -> (:bool);
	<kw-pattern>:               (:kw) -> (:bool);
	<kw-items>:                 (:kw) -> (:bool);
	<kw-additional-items>:      (:kw) -> (:bool);
	<kw-max-items>:             (:kw) -> (:bool);
	<kw-min-items>:             (:kw) -> (:bool);
	<kw-unique-items>:          (:kw) -> (:bool);
	<kw-contains>:              (:kw) -> (:bool);
	<kw-max-properties>:        (:kw) -> (:bool);
	<kw-min-properties>:        (:kw) -> (:bool);
	<kw-required>:              (:kw) -> (:bool);
	<kw-properties>:            (:kw) -> (:bool);
	<kw-pattern-properties>:    (:kw) -> (:bool);
	<kw-additional-properties>: (:kw) -> (:bool);
	<kw-dependencies>:          (:kw) -> (:bool);
	<kw-property-names>:        (:kw) -> (:bool);

	<kw-enum>:                  (:kw) -> (:bool);
	<kw-const>:                 (:kw) -> (:bool);
	<kw-type>:                  (:kw) -> (:bool);
	<kw-all-of>:                (:kw) -> (:bool);
	<kw-any-of>:                (:kw) -> (:bool);
	<kw-one-of>:                (:kw) -> (:bool);
	<kw-not>:                   (:kw) -> (:bool);

	<kw-title>:                 (:kw) -> (:bool);
	<kw-definitions>:           (:kw) -> (:bool);
	<kw-description>:           (:kw) -> (:bool);
	<kw-default>:               (:kw) -> (:bool);
	<kw-examples>:              (:kw) -> (:bool);

	<set-schema>:               (:string) -> ();
	<set-id>:                   (:string) -> ();
	<set-multiple-of>:          (:number) -> ();
	<set-maximum>:              (:number) -> ();
	<set-exclusive-maximum>:    (:number) -> ();
	<set-minimum>:              (:number) -> ();
	<set-exclusive-minimum>:    (:number) -> ();
        <set-min-properties>:       (:number) -> ();
        <set-max-properties>:       (:number) -> ();
        <set-pattern>:              (:regexp) -> ();
        <set-min-length>:           (:number) -> ();
        <set-max-length>:           (:number) -> ();
	<set-type>:                 (:type)   -> ();
	<set-title>:                (:string) -> ();
	<set-description>:          (:string) -> ();
        <set-properties>:           (:ast-prop-schema) -> ();
        <set-additional-properties>:
                                    (:ast-schema) -> ();

        <set-items-list>:           (:ast-schema-list) -> ();
        <set-items-single>:         (:ast-schema) -> ();
        <set-additional-items>:     (:ast-schema) -> ();
        <set-min-items>:            (:number) -> ();
        <set-max-items>:            (:number) -> ();

        <new-regexp>:               (:re-dialect, :string) -> (:regexp);
        <re-literal>:               () -> (:re-dialect);
        <re-pattern>:               () -> (:re-dialect);

	<clear-types>;

        <add-required-property>:    (:string) -> ();

        <new-prop-schema>:          (:regexp,:ast-schema) -> (:ast-prop-schema);

        <append-list-of-props>:     (:ast-prop-schema,:ast-prop-schema) -> ();

        <append-schema-to-list>:    (:ast-schema-list, :ast-schema) -> ();
        <new-schema-list>:          () -> (:ast-schema-list);

        <free-schema-list>:         (:ast-schema-list) -> ();

        <parse-schema>:             () -> (:ast-schema);

        <set-schema-true>:          () -> ();
        <set-schema-false>:         () -> ();

	<err-unimplemented>;
	<err-syntax>;
	<err-expected-colon>;
	<err-expected-comma>;
	<err-expected-directive>;
	<err-expected-schema>;
	<err-expected-type>;
	<err-expected-number>;
	<err-expected-string>;
	<err-expected-id>;

	placeholder = {
		NULL;
		<err-unimplemented>;
	};

	colon = {
		COLON;
	##
		<err-expected-colon>;
	};

	comma = {
		COMMA;
	##
		<err-expected-comma>;
	};

	directive-schema = {
		s = STRING;
		<set-schema>(s);
	##
		<err-expected-string>;
	};

	directive-ref = {
		placeholder;
	};

	directive-id = {
		s = STRING;
		<set-id>(s);
	##
		<err-expected-id>;
	};

	directive-multiple-of = {
		n = NUMBER;
		<set-multiple-of>(n);
	##
		<err-expected-number>;
	};

	directive-maximum = {
		n = NUMBER;
		<set-maximum>(n);
	##
		<err-expected-number>;
	};

	directive-exclusive-maximum = {
		n = NUMBER;
		<set-exclusive-maximum>(n);
	##
		<err-expected-number>;
	};

	directive-minimum = {
		n = NUMBER;
		<set-minimum>(n);
	##
		<err-expected-number>;
	};

	directive-exclusive-minimum = {
		n = NUMBER;
		<set-exclusive-minimum>(n);
	##
		<err-expected-number>;
	};

	directive-min-properties = {
		n = NUMBER;
		<set-min-properties>(n);
	##
		<err-expected-number>;
	};

	directive-max-properties = {
		n = NUMBER;
		<set-max-properties>(n);
	##
		<err-expected-number>;
	};

        directive-required [
                required-property = {
                        s = STRING;
                        <add-required-property>(s);
                };

                list-of-required-properties = {
                        required-property;
                        {
                                comma;
                                list-of-required-properties;
                        ||
                                $;
                        };
                };

        ] = {
                OBRACKET;
                list-of-required-properties;
                CBRACKET;
        };

	directive-type [

		type = {
			s = STRING;
			t = <type-lookup>(s);
			<set-type>(t);
		};

		list-of-types = {
			type;
			{
				comma;
				list-of-types;
			||
				$;
			};
		};

	] = {
		/*
		 * Since multiple instances of a keyword override the previous
		 * instance, we clear the set of previous types here so as to
		 * allow uniqueness checking within one instance's array.
		 */
		<clear-types>;

		{
			type;
		||
			OBRACKET;
			list-of-types;
			CBRACKET;
		};
	##
		<err-expected-type>;
	};

        directive-properties: (dialect :re-dialect) -> () [
                prop-schema: (dialect :re-dialect) -> (ps :ast-prop-schema) = {
                        s = STRING;
                        colon;
                        sch = <parse-schema>;
                        re = <new-regexp>(dialect,s);
                        ps = <new-prop-schema>(re,sch);
                };

                list-of-properties: (dialect :re-dialect) -> (ps :ast-prop-schema) = {
                        ps = prop-schema(dialect);
                        {
                                comma;
                                ps1 = list-of-properties(dialect);
                                <append-list-of-props>(ps,ps1);
                        ||
                                $;
                        };
                };
        ] = {
                OCURLY;
                ps = list-of-properties(dialect);
                <set-properties>(ps);
                CCURLY;
        };

        directive-additional-properties = {
                sch = <parse-schema>;
                <set-additional-properties>(sch);
        };

        directive-pattern = {
                s = STRING;
                dialect = <re-pattern>;
                re = <new-regexp>(dialect, s);
                <set-pattern>(re);
        };

	directive-min-length = {
		n = NUMBER;
		<set-min-length>(n);
	##
		<err-expected-number>;
	};

	directive-max-length = {
		n = NUMBER;
		<set-max-length>(n);
	##
		<err-expected-number>;
	};

        schema-list: () -> (lst :ast-schema-list) [
                next-schema: (lst :ast-schema-list) -> () = {
                        sch = <parse-schema>;
                        <append-schema-to-list>(lst,sch);
                };

                list-of-schema: (lst :ast-schema-list) -> () = {
                        next-schema(lst);
                        {
                                comma;
                                list-of-schema(lst);
                        ||
                                $;
                        };
                };
        ] = {
                lst = <new-schema-list>;
                OBRACKET;
                list-of-schema(lst);
                CBRACKET;
        };

        directive-items = {
                lst = schema-list;
                <set-items-list>(lst);
                <free-schema-list>(lst);
        ||
                sch = <parse-schema>;
                <set-items-single>(sch);
        };

        directive-additional-items = {
                sch = <parse-schema>;
                <set-additional-items>(sch);
        };

	directive-min-items = {
		n = NUMBER;
		<set-min-items>(n);
	##
		<err-expected-number>;
	};

	directive-max-items = {
		n = NUMBER;
		<set-max-items>(n);
	##
		<err-expected-number>;
	};

	directive-title = {
		s = STRING;
		<set-title>(s);
	##
		<err-expected-string>;
	};

	directive-description = {
		s = STRING;
		<set-description>(s);
	##
		<err-expected-string>;
	};

	directive: (k: kw) -> () = {
		? = <kw-schema>(k);
		directive-schema;
	||
		? = <kw-ref>(k);
		directive-ref;
	||
		? = <kw-id>(k);
		directive-id;
	||
		? = <kw-multiple-of>(k);
		directive-multiple-of;
	||
		? = <kw-maximum>(k);
		directive-maximum;
	||
		? = <kw-exclusive-maximum>(k);
		directive-exclusive-maximum;
	||
		? = <kw-minimum>(k);
		directive-minimum;
	||
		? = <kw-exclusive-minimum>(k);
		directive-exclusive-minimum;
	||
		? = <kw-max-length>(k);
                directive-max-length;
	||
		? = <kw-min-length>(k);
                directive-min-length;
	||
		? = <kw-pattern>(k);
		directive-pattern;
	||
		? = <kw-items>(k);
                directive-items;
	||
		? = <kw-additional-items>(k);
                directive-additional-items;
	||
		? = <kw-max-items>(k);
		directive-max-items;
	||
		? = <kw-min-items>(k);
		directive-min-items;
	||
		? = <kw-unique-items>(k);
		placeholder;
	||
		? = <kw-contains>(k);
		placeholder;
	||
		? = <kw-max-properties>(k);
		directive-max-properties;
	||
		? = <kw-min-properties>(k);
		directive-min-properties;
	||
		? = <kw-required>(k);
                directive-required;
	||
		? = <kw-properties>(k);
                dialect = <re-literal>;
                directive-properties(dialect);
	||
		? = <kw-pattern-properties>(k);
                dialect = <re-pattern>;
		directive-properties(dialect);
	||
		? = <kw-additional-properties>(k);
                directive-additional-properties;
	||
		? = <kw-dependencies>(k);
		placeholder;
	||
		? = <kw-property-names>(k);
		placeholder;
	||
		? = <kw-enum>(k);
		placeholder;
	||
		? = <kw-const>(k);
		placeholder;
	||
		? = <kw-type>(k);
		directive-type;
	||
		? = <kw-all-of>(k);
		placeholder;
	||
		? = <kw-any-of>(k);
		placeholder;
	||
		? = <kw-one-of>(k);
		placeholder;
	||
		? = <kw-not>(k);
		placeholder;
	||
		? = <kw-title>(k);
		directive-title;
	||
		? = <kw-definitions>(k);
		placeholder;
	||
		? = <kw-description>(k);
		directive-description;
	||
		? = <kw-default>(k);
		placeholder;
	||
		? = <kw-examples>(k);
		placeholder;
	##
		<err-expected-directive>;
	};

	list-of-directives = {
		s = STRING;
		k = <kw-lookup>(s);
		colon;
		directive(k);
		{
			comma;
			list-of-directives;
		||
			$;
		};
	##
		<err-expected-directive>;
	};

	array = {
		OBRACKET;
		/* TODO: ... */
		CBRACKET;
	};

	schema = {
		OCURLY;
		{
			list-of-directives;
		||
			$;
		};
		CCURLY;
	||
		array;
	||
		! = STRING;
	||
		! = NUMBER;
	||
		! = TRUE;
                <set-schema-true>;
	||
		! = FALSE;
                <set-schema-false>;
	||
		NULL;
	##
		<err-expected-schema>;
	};

	file = {
		schema;
		EOS;
	##
		<err-syntax>;
	};

%entry%

	file, schema;

