/*
 * Copyright 2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%types%

	string;
	bool;
	number;

	kw;
	type;

%terminals%

	!ERROR;
	EOS;
	OCURLY;    CCURLY;
	OBRACKET;  CBRACKET;
	STRING: () -> (:string);
	NUMBER: () -> (:number);
	TRUE:   () -> (:bool);
	FALSE:  () -> (:bool);
	NULL;

%productions%

	<kw-lookup>:   (:string) -> (:kw);
	<type-lookup>: (:string) -> (:type);

	<kw-schema>:                (:kw) -> (:bool);
	<kw-ref>:                   (:kw) -> (:bool);
	<kw-id>:                    (:kw) -> (:bool);

	<kw-multiple-of>:           (:kw) -> (:bool);
	<kw-maximum>:               (:kw) -> (:bool);
	<kw-exclusive-maximum>:     (:kw) -> (:bool);
	<kw-minimum>:               (:kw) -> (:bool);
	<kw-exclusive-minimum>:     (:kw) -> (:bool);
	<kw-max-length>:            (:kw) -> (:bool);
	<kw-min-length>:            (:kw) -> (:bool);
	<kw-pattern>:               (:kw) -> (:bool);
	<kw-items>:                 (:kw) -> (:bool);
	<kw-additional-items>:      (:kw) -> (:bool);
	<kw-max-items>:             (:kw) -> (:bool);
	<kw-min-items>:             (:kw) -> (:bool);
	<kw-unique-items>:          (:kw) -> (:bool);
	<kw-contains>:              (:kw) -> (:bool);
	<kw-max-properties>:        (:kw) -> (:bool);
	<kw-min-properties>:        (:kw) -> (:bool);
	<kw-required>:              (:kw) -> (:bool);
	<kw-properties>:            (:kw) -> (:bool);
	<kw-pattern-properties>:    (:kw) -> (:bool);
	<kw-additional-properties>: (:kw) -> (:bool);
	<kw-dependencies>:          (:kw) -> (:bool);
	<kw-property-names>:        (:kw) -> (:bool);

	<kw-enum>:                  (:kw) -> (:bool);
	<kw-const>:                 (:kw) -> (:bool);
	<kw-type>:                  (:kw) -> (:bool);
	<kw-all-of>:                (:kw) -> (:bool);
	<kw-any-of>:                (:kw) -> (:bool);
	<kw-one-of>:                (:kw) -> (:bool);
	<kw-not>:                   (:kw) -> (:bool);

	<kw-definitions>:           (:kw) -> (:bool);
	<kw-description>:           (:kw) -> (:bool);
	<kw-default>:               (:kw) -> (:bool);
	<kw-examples>:              (:kw) -> (:bool);

	<set-schema>:               (:string) -> ();
	<set-id>:                   (:string) -> ();
	<set-multiple-of>:          (:number) -> ();
	<set-maximum>:              (:number) -> ();
	<set-exclusive-maximum>:    (:number) -> ();
	<set-minimum>:              (:number) -> ();
	<set-exclusive-minimum>:    (:number) -> ();
	<set-type>:                 (:type)   -> ();

	<clear-types>;

	<err-unimplemented>;
	<err-syntax>;
	<err-expected-directive>;
	<err-expected-schema>;

	placeholder = {
		NULL;
		<err-unimplemented>;
	};

	directive-schema = {
		s = STRING;
		<set-schema>(s);
	};

	directive-ref = {
		placeholder;
	};

	directive-id = {
		s = STRING;
		<set-id>(s);
	};

	directive-multiple-of = {
		n = NUMBER;
		<set-multiple-of>(n);
	};

	directive-maximum = {
		n = NUMBER;
		<set-maximum>(n);
	};

	directive-exclusive-maximum = {
		n = NUMBER;
		<set-exclusive-maximum>(n);
	};

	directive-minimum = {
		n = NUMBER;
		<set-minimum>(n);
	};

	directive-exclusive-minimum = {
		n = NUMBER;
		<set-exclusive-minimum>(n);
	};

	directive-type [

		type = {
			s = STRING;
			t = <type-lookup>(s);
			<set-type>(t);
		};

		list-of-types = {
			type;
			list-of-types;
		||
			$;
		};

	] = {
		/*
		 * Since multiple instances of a keyword override the previous
		 * instance, we clear the set of previous types here so as to
		 * allow uniqueness checking within one instance's array.
		 */
		<clear-types>;

		{
			type;
		||
			OBRACKET;
			list-of-types;
			CBRACKET;
		};
	};

	directive: (k: kw) -> () = {
		? = <kw-schema>(k);
		directive-schema;
	||
		? = <kw-ref>(k);
		directive-ref;
	||
		? = <kw-id>(k);
		directive-id;
	||
		? = <kw-multiple-of>(k);
		directive-multiple-of;
	||
		? = <kw-maximum>(k);
		directive-maximum;
	||
		? = <kw-exclusive-maximum>(k);
		directive-exclusive-maximum;
	||
		? = <kw-minimum>(k);
		directive-minimum;
	||
		? = <kw-exclusive-minimum>(k);
		directive-exclusive-minimum;
	||
		? = <kw-max-length>(k);
		placeholder;
	||
		? = <kw-min-length>(k);
		placeholder;
	||
		? = <kw-pattern>(k);
		placeholder;
	||
		? = <kw-items>(k);
		placeholder;
	||
		? = <kw-additional-items>(k);
		placeholder;
	||
		? = <kw-max-items>(k);
		placeholder;
	||
		? = <kw-min-items>(k);
		placeholder;
	||
		? = <kw-unique-items>(k);
		placeholder;
	||
		? = <kw-contains>(k);
		placeholder;
	||
		? = <kw-max-properties>(k);
		placeholder;
	||
		? = <kw-min-properties>(k);
		placeholder;
	||
		? = <kw-required>(k);
		placeholder;
	||
		? = <kw-properties>(k);
		placeholder;
	||
		? = <kw-pattern-properties>(k);
		placeholder;
	||
		? = <kw-additional-properties>(k);
		placeholder;
	||
		? = <kw-dependencies>(k);
		placeholder;
	||
		? = <kw-property-names>(k);
		placeholder;
	||
		? = <kw-enum>(k);
		placeholder;
	||
		? = <kw-const>(k);
		placeholder;
	||
		? = <kw-type>(k);
		directive-type;
	||
		? = <kw-all-of>(k);
		placeholder;
	||
		? = <kw-any-of>(k);
		placeholder;
	||
		? = <kw-one-of>(k);
		placeholder;
	||
		? = <kw-not>(k);
		placeholder;
	||
		? = <kw-definitions>(k);
		placeholder;
	||
		? = <kw-description>(k);
		placeholder;
	||
		? = <kw-default>(k);
		placeholder;
	||
		? = <kw-examples>(k);
		placeholder;
	##
		<err-expected-directive>;
	};

	list-of-directives = {
		s = STRING;
		k = <kw-lookup>(s);
		directive(k);
		list-of-directives;
	||
		$;
	##
		<err-expected-directive>;
	};

	array = {
		OBRACKET;
		/* TODO: ... */
		CBRACKET;
	};

	schema = {
		OCURLY;
		list-of-directives;
		CCURLY;
	||
		array;
	||
		! = STRING;
	||
		! = NUMBER;
	||
		! = TRUE;
	||
		! = FALSE;
	||
		NULL;
	##
		<err-expected-schema>;
	};

	file = {
		schema;
		EOS;
	##
		<err-syntax>;
	};

%entry%

	file;

